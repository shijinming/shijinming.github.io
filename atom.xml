<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinming Shi</title>
  
  <subtitle>Pas de grand désir, pas de grand talent.</subtitle>
  <link href="http://shijinming.github.io/atom.xml" rel="self"/>
  
  <link href="http://shijinming.github.io/"/>
  <updated>2020-12-10T18:35:12.003Z</updated>
  <id>http://shijinming.github.io/</id>
  
  <author>
    <name>Jinming Shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github 太慢的解决方式</title>
    <link href="http://shijinming.github.io/2020/12/11/github/"/>
    <id>http://shijinming.github.io/2020/12/11/github/</id>
    <published>2020-12-10T18:35:11.987Z</published>
    <updated>2020-12-10T18:35:12.003Z</updated>
    
    <content type="html"><![CDATA[<p>将</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com.cnpmjs&#x2F;xxx&#x2F;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;xxx&amp;#x2F;xxx&lt;span aria-hidden</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://shijinming.github.io/2020/12/11/hello-world/"/>
    <id>http://shijinming.github.io/2020/12/11/hello-world/</id>
    <published>2020-12-10T18:35:11.970Z</published>
    <updated>2020-12-10T18:35:11.987Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>创建blog</title>
    <link href="http://shijinming.github.io/2020/12/11/create-blog/"/>
    <id>http://shijinming.github.io/2020/12/11/create-blog/</id>
    <published>2020-12-10T18:35:11.920Z</published>
    <updated>2020-12-10T18:35:11.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-本地预览"><a href="#2-本地预览" class="headerlink" title="2. 本地预览"></a>2. 本地预览</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new test_my_sitehexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n  <span class="token string">"我的博客"</span> <span class="token operator">==</span> hexo new  <span class="token string">"我的博客"</span>   <span class="token comment">#新建文章</span>hexo g <span class="token operator">==</span> hexo generate   <span class="token comment">#生成</span>hexo s <span class="token operator">==</span> hexo server   <span class="token comment">#启动服务预览</span>hexo d <span class="token operator">==</span> hexo deploy   <span class="token comment">#部署</span>hexo server     <span class="token comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span>hexo server -s    <span class="token comment">#静态模式</span>hexo server -p <span class="token number">5000</span>     <span class="token comment">#更改端口</span>hexo server -i <span class="token number">192.168</span>.1.1     <span class="token comment">#自定义 IP</span>hexo clean     <span class="token comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-推送blog"><a href="#4-推送blog" class="headerlink" title="4. 推送blog"></a>4. 推送blog</h2><p>打开blog根目录的站点配置文件 <code>_config.yml</code>, 修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:type: <span class="token function">git</span>repo: https://github.com/shijinming/shijinming.github.io.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>部署blog</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-更换主题"><a href="#5-更换主题" class="headerlink" title="5. 更换主题"></a>5. 更换主题</h2><p>在 <code>themes</code> 文件夹中使用 <code>git clone</code> 下载主题，然后修改blog根目录下的 <code>_config.yml</code> 的 <code>theme</code> 值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-初始化&quot;&gt;&lt;a href=&quot;#1-初始化&quot; class=&quot;headerlink&quot; title=&quot;1. 初始化&quot;&gt;&lt;/a&gt;1. 初始化&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nodejs环境搭建</title>
    <link href="http://shijinming.github.io/2020/12/11/node-install/"/>
    <id>http://shijinming.github.io/2020/12/11/node-install/</id>
    <published>2020-12-10T18:35:11.914Z</published>
    <updated>2020-12-10T18:35:11.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装node"><a href="#1-安装node" class="headerlink" title="1. 安装node"></a>1. 安装node</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nodejs <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-版本升级"><a href="#2-版本升级" class="headerlink" title="2. 版本升级"></a>2. 版本升级</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">npm</span><span class="token function">npm</span> i -g nn stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h2><p>生成 <code>package.json</code> 配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init --yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4. 安装hexo"></a>4. 安装hexo</h2><p>在 <code>package.json</code> 中添加</p><pre class="line-numbers language-none"><code class="language-none">&quot;hexo&quot;: &#123;  &quot;version&quot;: &quot;4.2.1&quot;&#125;,&quot;dependencies&quot;: &#123;  &quot;hexo&quot;: &quot;^4.2.0&quot;,  &quot;hexo-deployer-git&quot;: &quot;^2.1.0&quot;,  &quot;hexo-deployer-rsync&quot;: &quot;^1.0.0&quot;,  &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,  &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,  &quot;hexo-generator-feed&quot;: &quot;^2.2.0&quot;,  &quot;hexo-generator-index&quot;: &quot;^1.0.0&quot;,  &quot;hexo-generator-search&quot;: &quot;^2.4.0&quot;,  &quot;hexo-generator-seo-friendly-sitemap&quot;: &quot;0.0.25&quot;,  &quot;hexo-generator-sitemap&quot;: &quot;^2.0.0&quot;,  &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,  &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;,  &quot;hexo-renderer-marked&quot;: &quot;^3.0.0&quot;,  &quot;hexo-renderer-stylus&quot;: &quot;^1.1.0&quot;,  &quot;hexo-server&quot;: &quot;^1.0.0&quot;,  &quot;hexo-symbols-count-time&quot;: &quot;^0.7.1&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装自动更新工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> npm-check-updates -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看版本更新</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新版本信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>版本更新</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装和更新 <code>hexo-cli</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装node&quot;&gt;&lt;a href=&quot;#1-安装node&quot; class=&quot;headerlink&quot; title=&quot;1. 安装node&quot;&gt;&lt;/a&gt;1. 安装node&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-la</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tensorflow中测试GPU方法</title>
    <link href="http://shijinming.github.io/2018/06/18/tensorflow-zhong-ce-shi-gpu-fang-fa/"/>
    <id>http://shijinming.github.io/2018/06/18/tensorflow-zhong-ce-shi-gpu-fang-fa/</id>
    <published>2018-06-17T16:06:48.000Z</published>
    <updated>2020-12-10T18:35:11.882Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_gpu_available</span><span class="token punctuation">(</span>cuda_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>python<span class="token punctuation">.</span>client <span class="token keyword">import</span> device_lib <span class="token keyword">as</span> _device_lib  <span class="token keyword">if</span> cuda_only<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>device_type <span class="token operator">==</span> <span class="token string">'GPU'</span><span class="token punctuation">)</span>               <span class="token keyword">for</span> x <span class="token keyword">in</span> _device_lib<span class="token punctuation">.</span>list_local_devices<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>device_type <span class="token operator">==</span> <span class="token string">'GPU'</span> <span class="token keyword">or</span> x<span class="token punctuation">.</span>device_type <span class="token operator">==</span> <span class="token string">'SYCL'</span><span class="token punctuation">)</span>               <span class="token keyword">for</span> x <span class="token keyword">in</span> _device_lib<span class="token punctuation">.</span>list_local_devices<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_available_gpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>python<span class="token punctuation">.</span>client <span class="token keyword">import</span> device_lib <span class="token keyword">as</span> _device_lib    local_device_protos <span class="token operator">=</span> _device_lib<span class="token punctuation">.</span>list_local_devices<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>name <span class="token keyword">for</span> x <span class="token keyword">in</span> local_device_protos <span class="token keyword">if</span> x<span class="token punctuation">.</span>device_type <span class="token operator">==</span> <span class="token string">'GPU'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span </summary>
      
    
    
    
    <category term="Python" scheme="http://shijinming.github.io/categories/Python/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/categories/Python/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Python" scheme="http://shijinming.github.io/tags/Python/"/>
    
    <category term="Tensorflow" scheme="http://shijinming.github.io/tags/Tensorflow/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>cudnn安裝方法</title>
    <link href="http://shijinming.github.io/2018/06/18/cudnn-an-zhuang-fang-fa/"/>
    <id>http://shijinming.github.io/2018/06/18/cudnn-an-zhuang-fang-fa/</id>
    <published>2018-06-17T16:05:25.000Z</published>
    <updated>2020-12-10T18:35:11.904Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda/include $ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64 $ <span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来自 <a href="http://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html">http://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span cl</summary>
      
    
    
    
    <category term="Python" scheme="http://shijinming.github.io/categories/Python/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/categories/Python/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Python" scheme="http://shijinming.github.io/tags/Python/"/>
    
    <category term="Tensorflow" scheme="http://shijinming.github.io/tags/Tensorflow/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python微信库:itchat的用法详解</title>
    <link href="http://shijinming.github.io/2018/06/17/python-wei-xin-ku-itchat-de-yong-fa-xiang-jie/"/>
    <id>http://shijinming.github.io/2018/06/17/python-wei-xin-ku-itchat-de-yong-fa-xiang-jie/</id>
    <published>2018-06-17T15:13:32.000Z</published>
    <updated>2020-12-10T18:35:12.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最简单的回复"><a href="#最简单的回复" class="headerlink" title="最简单的回复"></a>最简单的回复</h1><p>通过如下代码，可以完成回复所有文本信息（包括群聊）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> TEXT <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token keyword">def</span> <span class="token function">simple_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> msg<span class="token punctuation">[</span><span class="token string">'Type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> TEXT<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'I received: %s'</span> <span class="token operator">%</span> msg<span class="token punctuation">[</span><span class="token string">'Content'</span><span class="token punctuation">]</span> itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用消息的配置"><a href="#常用消息的配置" class="headerlink" title="常用消息的配置"></a>常用消息的配置</h1><p>itchat支持所有的消息类型与群聊，下面的示例中演示了对于这些消息类型简单的配置。</p><pre class="line-numbers language-none"><code class="language-none">#coding&#x3D;utf8import itchatfrom itchat.content import *@itchat.msg_register([TEXT, MAP, CARD, NOTE, SHARING])def text_reply(msg):  itchat.send(&#39;%s: %s&#39; % (msg[&#39;Type&#39;], msg[&#39;Text&#39;]), msg[&#39;FromUserName&#39;]) # 以下四类的消息的Text键下存放了用于下载消息内容的方法，传入文件地址即可@itchat.msg_register([PICTURE, RECORDING, ATTACHMENT, VIDEO])def download_files(msg):  msg[&#39;Text&#39;](msg[&#39;FileName&#39;])  return &#39;@%s@%s&#39; % (&#123;&#39;Picture&#39;: &#39;img&#39;, &#39;Video&#39;: &#39;vid&#39;&#125;.get(msg[&#39;Type&#39;], &#39;fil&#39;), msg[&#39;FileName&#39;]) # 收到好友邀请自动添加好友@itchat.msg_register(FRIENDS)def add_friend(msg):  itchat.add_friend(**msg[&#39;Text&#39;]) # 该操作会自动将新好友的消息录入，不需要重载通讯录  itchat.send_msg(&#39;Nice to meet you!&#39;, msg[&#39;RecommendInfo&#39;][&#39;UserName&#39;])# 在注册时增加isGroupChat&#x3D;True将判定为群聊回复@itchat.msg_register(TEXT, isGroupChat &#x3D; True)def groupchat_reply(msg):  if msg[&#39;isAt&#39;]:    itchat.send(u&#39;@%s\u2005I received: %s&#39; % (msg[&#39;ActualNickName&#39;], msg[&#39;Content&#39;]), msg[&#39;FromUserName&#39;])itchat.auto_login(True)itchat.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然这里不需要深究为什么这些东西可以这么写，我在这里放出了示例程序只是为了给你一个该sdk相关代码大概样子的概念。<br>有了大概的模式的了解之后我们就可以进入下一部分的介绍。</p><h1 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h1><p>在上一部分中你看到了基本的注册与登陆，而显然登陆使用的是itchat提供了auto_login方法，调用即可完成登录。<br>一般而言，我们都会在完成消息的注册后登陆。<br>当然这里需要特别强调的是三点，分别是短时间关闭重连、命令行二维码与自定义登陆内容。 itchat提供了登陆状态暂存，关闭程序后一定时间内不需要扫码即可登录。 为了方便在无图形界面使用itchat，程序内置了命令行二维码的显示。 * 如果你需要就登录状态就一些修改（例如更改提示语、二维码出现后邮件发送等）。<br><strong>短时间关闭程序后重连</strong><br>这样即使程序关闭，一定时间内重新开启也可以不用重新扫码。<br>最简单的用法就是给 auto_login 方法传入值为真的 hotReload 。<br>该方法会生成一个静态文件 itchat.pkl ，用于存储登陆的状态。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> TEXT <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">simple_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span>hotReload<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>dump_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过设置statusStorageDir可以将静态文件指定为其他的值。<br>这一内置选项其实就相当于使用了以下两个函数的这一段程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> TEXT<span class="token keyword">if</span> itchat<span class="token punctuation">.</span>load_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">simple_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  itchat<span class="token punctuation">.</span>dump_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>  itchat<span class="token punctuation">.</span>dump_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Config stored, so exit.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中load_login_status与dump_login_status分别对应读取与导出设置。<br>通过设置传入的fileDir的值可以设定导入导出的文件。<br><strong>命令行二维码显示</strong><br>通过以下命令可以在登陆的时候使用命令行显示二维码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span>enableCmdQR<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部分系统可能字幅宽度有出入，可以通过将enableCmdQR赋值为特定的倍数进行调整：</p><pre class="line-numbers language-none"><code class="language-none"># 如部分的linux系统，块字符的宽度为一个字符（正常应为两字符），故赋值为2itchat.auto_login(enableCmdQR&#x3D;2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认控制台背景色为暗色（黑色），若背景色为浅色（白色），可以将enableCmdQR赋值为负值：</p><pre class="line-numbers language-none"><code class="language-none">itchat.auto_login(enableCmdQR&#x3D;-1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>自定义登录过程</strong><br>如果需要控制登录的过程，可以阅读下面的内容。<br>同时itchat也提供了登陆所需的每一步的方法，登陆的过程按顺序为： 获取二维码uuid-&gt;获取二维码-&gt;判断是否已经登陆成功-&gt;获取初始化数据-&gt;更新微信相关信息（通讯录、手机登陆状态）-&gt;循环扫描新信息（开启心跳）</p><ul><li>获取二维码uuid<br>获取生成二维码所需的uuid，并返回。<br>方法名称： get_QRuuid<br>所需值：无<br>返回值：成功-&gt;uuid，失败-&gt;None</li><li>获取二维码<br>根据uuid获取二维码并打开，返回是否成功。<br>方法名称： get_QR<br>所需值：uuid<br>返回值：成功-&gt;True，失败-&gt;False</li><li>判断是否已经登陆成功<br>判断是否已经登陆成功，返回扫描的状态码。<br>方法名称： check_login<br>所需值：uuid<br>返回值：登陆成功-&gt;’200’，已扫描二维码-&gt;’201’，二维码失效-&gt;’408’，未获取到信息-&gt;’0’</li><li>获取初始化数据<br>获取微信用户信息以及心跳所需要的数据。<br>方法名称： web_init<br>所需值：无<br>返回值：存储登录微信用户信息的字典</li><li>获取微信通讯录<br>获取微信的所有好友信息并更新。<br>方法名称： get_contract<br>所需值：无<br>返回值：存储好友信息的列表</li><li>更新微信手机登陆状态<br>在手机上显示登录状态。<br>方法名称： show_mobile_login<br>所需值：无<br>返回值：无</li><li>循环扫描新信息（开启心跳）<br>循环扫描是否有新的消息，开启心跳包。<br>方法名称： start_receiving<br>所需值：无<br>返回值：无</li></ul><p>EG：<br>一个登录例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token punctuation">,</span> time<span class="token punctuation">,</span> sys<span class="token keyword">def</span> <span class="token function">output_info</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[INFO] %s'</span> <span class="token operator">%</span> msg<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">open_QR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> get_count <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    output_info<span class="token punctuation">(</span><span class="token string">'Getting uuid'</span><span class="token punctuation">)</span>    uuid <span class="token operator">=</span> itchat<span class="token punctuation">.</span>get_QRuuid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> uuid <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> uuid <span class="token operator">=</span> itchat<span class="token punctuation">.</span>get_QRuuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    output_info<span class="token punctuation">(</span><span class="token string">'Getting QR Code'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> itchat<span class="token punctuation">.</span>get_QR<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">break</span>    <span class="token keyword">elif</span> get_count <span class="token operator">>=</span> <span class="token number">9</span><span class="token punctuation">:</span>      output_info<span class="token punctuation">(</span><span class="token string">'Failed to get QR Code, please restart the program'</span><span class="token punctuation">)</span>      sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>  output_info<span class="token punctuation">(</span><span class="token string">'Please scan the QR Code'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> uuid uuid <span class="token operator">=</span> open_QR<span class="token punctuation">(</span><span class="token punctuation">)</span>waitForConfirm <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>  status <span class="token operator">=</span> itchat<span class="token punctuation">.</span>check_login<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>  <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">'200'</span><span class="token punctuation">:</span>    <span class="token keyword">break</span>  <span class="token keyword">elif</span> status <span class="token operator">==</span> <span class="token string">'201'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> waitForConfirm<span class="token punctuation">:</span>      output_info<span class="token punctuation">(</span><span class="token string">'Please press confirm'</span><span class="token punctuation">)</span>      waitForConfirm <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token keyword">elif</span> status <span class="token operator">==</span> <span class="token string">'408'</span><span class="token punctuation">:</span>    output_info<span class="token punctuation">(</span><span class="token string">'Reloading QR Code'</span><span class="token punctuation">)</span>    uuid <span class="token operator">=</span> open_QR<span class="token punctuation">(</span><span class="token punctuation">)</span>    waitForConfirm <span class="token operator">=</span> <span class="token boolean">False</span>userInfo <span class="token operator">=</span> itchat<span class="token punctuation">.</span>web_init<span class="token punctuation">(</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>show_mobile_login<span class="token punctuation">(</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>get_contract<span class="token punctuation">(</span><span class="token punctuation">)</span>output_info<span class="token punctuation">(</span><span class="token string">'Login successfully as %s'</span><span class="token operator">%</span>userInfo<span class="token punctuation">[</span><span class="token string">'NickName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>start_receiving<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Start auto-replying</span><span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token keyword">def</span> <span class="token function">simple_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> msg<span class="token punctuation">[</span><span class="token string">'Type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Text'</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'I received: %s'</span> <span class="token operator">%</span> msg<span class="token punctuation">[</span><span class="token string">'Content'</span><span class="token punctuation">]</span>itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注册消息方法"><a href="#注册消息方法" class="headerlink" title="注册消息方法"></a>注册消息方法</h1><p>itchat将根据接收到的消息类型寻找对应的已经注册的方法。<br>如果一个消息类型没有对应的注册方法，该消息将会被舍弃。<br>在运行过程当中也可以动态注册方法，注册方式与结果不变。<br>注册<br>你可以通过两种方式注册消息方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment"># 不带参数注册，所有消息类型都将调用该方法（包括群消息）</span><span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token keyword">def</span> <span class="token function">simple_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> msg<span class="token punctuation">[</span><span class="token string">'Type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Text'</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'I received: %s'</span> <span class="token operator">%</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span> <span class="token comment"># 带参数注册，该类消息类型将调用该方法</span><span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span><span class="token punctuation">[</span>TEXT<span class="token punctuation">,</span> MAP<span class="token punctuation">,</span> CARD<span class="token punctuation">,</span> NOTE<span class="token punctuation">,</span> SHARING<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'Type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">[</span><span class="token string">'FromUserName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h1><p>向注册方法传入的msg包含微信返回的字典的所有内容。<br>本api增加Text、Type（也就是参数）键值，方便操作。<br>itchat.content中包含所有的消息类型参数，内容如下表所示：</p><p>比如你需要存储发送给你的附件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>ATTACHMENT<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download_files</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'FileName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>值得注意的是，群消息增加了三个键值： isAt: 判断是否@本号 ActualNickName: 实际NickName * Content: 实际Content<br>可以通过本程序测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> TEXT <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">,</span> isGroupChat <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'isAt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'ActualNickName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token string">'Content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注册消息的优先级</strong><br>优先级分别为：后注册消息先于先注册消息，带参数消息先于不带参数消息。<br>以下面的两个程序为例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> <span class="token operator">*</span> itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'This is the old register'</span> <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'This is a new one'</span> itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在私聊发送文本时将会回复This is a new one。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> <span class="token operator">*</span> itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token keyword">def</span> <span class="token function">general_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'I received a %s'</span> <span class="token operator">%</span> msg<span class="token punctuation">[</span><span class="token string">'Type'</span><span class="token punctuation">]</span> <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'You said to me one to one: %s'</span> <span class="token operator">%</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span> itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅在私聊发送文本时将会回复You said to me one to one，其余情况将会回复I received a …。<br><strong>动态注册消息</strong><br>动态注册时可以选择将 itchat.run() 放入另一线程或使用 configured_reply() 方法处理消息。<br>两种方法分别是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用另一线程，但注意不要让程序运行终止</span><span class="token keyword">import</span> thread thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>itchat<span class="token punctuation">.</span>run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 使用configured_reply方法</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>  itchat<span class="token punctuation">.</span>configured_reply<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># some other functions</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下给出一个动态注册的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span><span class="token keyword">import</span> thread <span class="token keyword">import</span> itchat<span class="token keyword">from</span> itchat<span class="token punctuation">.</span>content <span class="token keyword">import</span> <span class="token operator">*</span> replyToGroupChat <span class="token operator">=</span> <span class="token boolean">True</span>functionStatus <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token keyword">def</span> <span class="token function">change_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> replyToGroupChat <span class="token operator">!=</span> functionStatus<span class="token punctuation">:</span>    <span class="token keyword">if</span> replyToGroupChat<span class="token punctuation">:</span>      <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">,</span> isGroupChat <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">group_text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">u'关闭'</span> <span class="token keyword">in</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          replyToGroupChat <span class="token operator">=</span> <span class="token boolean">False</span>          <span class="token keyword">return</span> <span class="token string">u'已关闭'</span>        <span class="token keyword">elif</span> <span class="token string">u'开启'</span> <span class="token keyword">in</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">u'已经在运行'</span>        <span class="token keyword">return</span> <span class="token string">u'输入"关闭"或者"开启"测试功能'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span>TEXT<span class="token punctuation">,</span> isGroupChat <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">group_text_reply</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">u'开启'</span> <span class="token keyword">in</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>          replyToGroupChat <span class="token operator">=</span> <span class="token boolean">True</span>          <span class="token keyword">return</span> <span class="token string">u'重新开启成功'</span>    functionStatus <span class="token operator">=</span> replyToGroupChat thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>itchat<span class="token punctuation">.</span>run<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>  change_function<span class="token punctuation">(</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="回复"><a href="#回复" class="headerlink" title="回复"></a>回复</h1><p>itchat提供五种回复方法，建议直接使用send方法。<br><strong>send方法</strong><br>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">send<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">'Text Message'</span><span class="token punctuation">,</span> toUserName<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所需值：</p><ol><li>msg：消息内容</li><li>‘@fil@文件地址’将会被识别为传送文件，‘@img@图片地址’将会被识别为传送图片，‘@vid@视频地址’将会被识别为小视频</li><li>toUserName：发送对象，如果留空将会发送给自己</li></ol><p>返回值：发送成功-&gt;True, 失败-&gt;False</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span><span class="token keyword">import</span> itchat itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token comment"># 请确保该程序目录下存在：gz.gif以及xlsx.xlsx</span>itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'@img@%s'</span> <span class="token operator">%</span> <span class="token string">'gz.gif'</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'@fil@%s'</span> <span class="token operator">%</span> <span class="token string">'xlsx.xlsx'</span><span class="token punctuation">)</span>itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'@vid@%s'</span> <span class="token operator">%</span> <span class="token string">'demo.mp4'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>send_msg方法</strong><br>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">send_msg<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">'Text Message'</span><span class="token punctuation">,</span> toUserName<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所需值：<br>msg：消息内容<br> toUserName：发送对象，如果留空将会发送给自己<br>返回值：发送成功-&gt;True, 失败-&gt;False<br>程序示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span> itchat<span class="token punctuation">.</span>send_msg<span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>send_file方法</strong><br>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">send_file<span class="token punctuation">(</span>fileDir<span class="token punctuation">,</span> toUserName<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所需值：<br>fileDir：文件路径（不存在该文件时将打印无此文件的提醒）<br> toUserName：发送对象，如果留空将会发送给自己<br>返回值：发送成功-&gt;True, 失败-&gt;False</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span> <span class="token keyword">import</span> itchat itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#请确保该程序目录下存在：xlsx.xlsx</span> itchat<span class="token punctuation">.</span>send_file<span class="token punctuation">(</span><span class="token string">'xlsx.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>send_img方法</strong><br>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">send_img<span class="token punctuation">(</span>fileDir<span class="token punctuation">,</span> toUserName<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所需值：<br>fileDir：文件路径（不存在该文件时将打印无此文件的提醒）<br> toUserName：发送对象，如果留空将会发送给自己<br>返回值：发送成功-&gt;True, 失败-&gt;False</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span><span class="token keyword">import</span> itchat itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 请确保该程序目录下存在：gz.gif</span>itchat<span class="token punctuation">.</span>send_img<span class="token punctuation">(</span><span class="token string">'gz.gif'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>send_video方法</strong><br>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">send_video<span class="token punctuation">(</span>fileDir<span class="token punctuation">,</span> toUserName<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所需值：<br>fileDir：文件路径（不存在该文件时将打印无此文件的提醒）<br> toUserName：发送对象，如果留空将会发送给自己<br>返回值：发送成功-&gt;True, 失败-&gt;False<br>需要保证发送的视频为一个实质的mp4文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span> <span class="token keyword">import</span> itchat itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#请确保该程序目录下存在：demo.mp4</span> itchat<span class="token punctuation">.</span>send_file<span class="token punctuation">(</span><span class="token string">'demo.mp4'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h1><p>在使用个人微信的过程当中主要有三种账号需要获取，分别为： 好友 公众号 群聊<br>itchat为这三种账号都提供了整体获取方法与搜索方法。<br>而群聊多出获取用户列表方法以及创建群聊、增加、删除用户的方法。<br>这里我们分这三种分别介绍如何使用。<br><strong>好友</strong><br>好友的获取方法为 get_friends ，将会返回完整的好友列表。 其中每个好友为一个字典 列表的第一项为本人的账号信息 * 传入update键为True将可以更新好友列表并返回<br>好友的搜索方法为 search_friends ，有四种搜索方式： 1. 仅获取自己的用户信息 2. 获取特定 UserName 的用户信息 3. 获取备注、微信号、昵称中的任何一项等于 name 键值的用户 4. 获取备注、微信号、昵称分别等于相应键值的用户<br>其中三、四项可以一同使用，下面是示例程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取自己的用户信息，返回自己的属性字典</span>itchat<span class="token punctuation">.</span>search_friends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取特定UserName的用户信息</span>itchat<span class="token punctuation">.</span>search_friends<span class="token punctuation">(</span>userName<span class="token operator">=</span><span class="token string">'@abcdefg1234567'</span><span class="token punctuation">)</span><span class="token comment"># 获取任何一项等于name键值的用户</span>itchat<span class="token punctuation">.</span>search_friends<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'littlecodersh'</span><span class="token punctuation">)</span><span class="token comment"># 获取分别对应相应键值的用户</span>itchat<span class="token punctuation">.</span>search_friends<span class="token punctuation">(</span>wechatAccount<span class="token operator">=</span><span class="token string">'littlecodersh'</span><span class="token punctuation">)</span><span class="token comment"># 三、四项功能可以一同使用</span>itchat<span class="token punctuation">.</span>search_friends<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'LittleCoder机器人'</span><span class="token punctuation">,</span> wechatAccount<span class="token operator">=</span><span class="token string">'littlecodersh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>公众号</strong><br>公众号的获取方法为 get_mps ，将会返回完整的公众号列表。 其中每个公众号为一个字典 传入update键为True将可以更新公众号列表并返回<br>公众号的搜索方法为 search_mps ，有两种搜索方法： 1. 获取特定 UserName 的公众号 2. 获取名字中含有特定字符的公众号<br>如果两项都做了特定，将会仅返回特定 UserName 的公众号，下面是示例程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取特定UserName的公众号，返回值为一个字典</span>itchat<span class="token punctuation">.</span>search_mps<span class="token punctuation">(</span>userName<span class="token operator">=</span><span class="token string">'@abcdefg1234567'</span><span class="token punctuation">)</span><span class="token comment"># 获取名字中含有特定字符的公众号，返回值为一个字典的列表</span>itcaht<span class="token punctuation">.</span>search_mps<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'LittleCoder'</span><span class="token punctuation">)</span><span class="token comment"># 以下方法相当于仅特定了UserName</span>itchat<span class="token punctuation">.</span>search_mps<span class="token punctuation">(</span>userName<span class="token operator">=</span><span class="token string">'@abcdefg1234567'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'LittleCoder'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>群聊</strong><br>群聊的获取方法为 get_chatrooms ，将会返回完整的群聊列表。 其中每个群聊为一个字典 传入update键为True将可以更新群聊列表并返回<br>群聊的搜索方法为 search_chatrooms ，有两种搜索方法： 1. 获取特定UserName的群聊 2. 获取名字中含有特定字符的群聊<br>如果两项都做了特定，将会仅返回特定UserName的群聊，下面是示例程序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取特定UserName的群聊，返回值为一个字典</span>itchat<span class="token punctuation">.</span>search_chatrooms<span class="token punctuation">(</span>userName<span class="token operator">=</span><span class="token string">'@abcdefg1234567'</span><span class="token punctuation">)</span><span class="token comment"># 获取名字中含有特定字符的群聊，返回值为一个字典的列表</span>itcaht<span class="token punctuation">.</span>search_chatrooms<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'LittleCoder'</span><span class="token punctuation">)</span><span class="token comment"># 以下方法相当于仅特定了UserName</span>itchat<span class="token punctuation">.</span>search_chatrooms<span class="token punctuation">(</span>userName<span class="token operator">=</span><span class="token string">'@abcdefg1234567'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'LittleCoder'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>群聊用户列表的获取方法为 update_chatroom 。 群聊在首次获取中不会获取群聊的用户列表，所以需要调用该命令才能获取群聊的成员 该方法需要传入群聊的UserName，返回特定群聊的用户列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">memberList <span class="token operator">=</span> itchat<span class="token punctuation">.</span>update_chatroom<span class="token punctuation">(</span><span class="token string">'@abcdefg1234567'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建群聊、增加、删除群聊用户的方法如下所示： 由于之前通过群聊检测是否被好友拉黑的程序，目前这三个方法都被严格限制了使用频率 删除群聊需要本账号为群管理员，否则会失败</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">memberList <span class="token operator">=</span> itchat<span class="token punctuation">.</span>get_friends<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 创建群聊，topic键值为群聊名</span>chatroomUserName <span class="token operator">=</span> itchat<span class="token punctuation">.</span>create_chatroom<span class="token punctuation">(</span>memberList<span class="token punctuation">,</span> <span class="token string">'test chatroom'</span><span class="token punctuation">)</span><span class="token comment"># 删除群聊内的用户</span>itchat<span class="token punctuation">.</span>delete_member_from_chatroom<span class="token punctuation">(</span>chatroomUserName<span class="token punctuation">,</span> memberList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 增加用户进入群聊</span>itchat<span class="token punctuation">.</span>add_member_into_chatroom<span class="token punctuation">(</span>chatroomUserName<span class="token punctuation">,</span> memberList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="QAQ"><a href="#QAQ" class="headerlink" title="QAQ"></a>QAQ</h1><p>Q: 为什么我在设定了itchat.auto_login()的enableCmdQR为True后还是没有办法在命令行显示二维码？<br>A: 这是由于没有安装可选的包 pillow ，可以使用右边的命令安装： pip install pillow</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">signin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 查找公众号，进行签到</span>    user <span class="token operator">=</span> itchat<span class="token punctuation">.</span>search_mps<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Nulll.me'</span><span class="token punctuation">)</span>    UserName <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'UserName'</span><span class="token punctuation">]</span>    itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">u'3'</span><span class="token punctuation">,</span> toUserName<span class="token operator">=</span>UserName<span class="token punctuation">)</span>    itchat<span class="token punctuation">.</span>dump_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span>    pickleDumps<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> localDay<span class="token punctuation">)</span> <span class="token comment"># 如果执行成功写入标致文件</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 如果不是在登陆状态，就循环登陆</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> itchat<span class="token punctuation">.</span>load_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sendMail<span class="token punctuation">(</span><span class="token punctuation">)</span>        itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span>hotReload<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        itchat<span class="token punctuation">.</span>dump_login_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        signin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 签到</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>    signin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 签到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持脚本之家。</p><p>来自 <a href="http://www.jb51.net/article/121076.htm">http://www.jb51.net/article/121076.htm</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最简单的回复&quot;&gt;&lt;a href=&quot;#最简单的回复&quot; class=&quot;headerlink&quot; title=&quot;最简单的回复&quot;&gt;&lt;/a&gt;最简单的回复&lt;/h1&gt;&lt;p&gt;通过如下代码，可以完成回复所有文本信息（包括群聊）。&lt;/p&gt;
&lt;pre class=&quot;line-number</summary>
      
    
    
    
    <category term="Python" scheme="http://shijinming.github.io/categories/Python/"/>
    
    <category term="微信" scheme="http://shijinming.github.io/categories/Python/%E5%BE%AE%E4%BF%A1/"/>
    
    
    <category term="Python" scheme="http://shijinming.github.io/tags/Python/"/>
    
    <category term="微信" scheme="http://shijinming.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>如何在Jupyter Notebook中使用Tensorflow</title>
    <link href="http://shijinming.github.io/2018/06/17/ru-he-zai-jupyter-notebook-zhong-shi-yong-tensorflow/"/>
    <id>http://shijinming.github.io/2018/06/17/ru-he-zai-jupyter-notebook-zhong-shi-yong-tensorflow/</id>
    <published>2018-06-17T15:10:49.000Z</published>
    <updated>2020-12-10T18:35:11.866Z</updated>
    
    <content type="html"><![CDATA[<ol><li>打开终端</li><li>运行下面的命令来启用TensorFlow source activate tensorflow</li><li>现在我们已经进入了TensorFlow的环境，我们要在这个环境中安装iPython和jupyter，运行下面的命令conda install ipython以及conda install jupyter</li><li>下面的步骤基本上按照Using a virtualenv in an IPython notebook中的进行，只是多加了一点内容。首先运行下面的命令，ipython kernelspec install-self –user,我这里得到的结果是Installed kernelspec python3 in /Users/charliebrummitt/Library/Jupyter/kernels/python3</li><li>运行下边的命令mkdir -p <del>/.ipython/kernels <br>然后运行下边的命令，使用你选择的名字来代替<kernel_name>（我使用的tfkernel），并且使用第4步中得到的路径(例如，</del>/.local/share/jupyter/kernels/pythonX)来替换下方命令中的第一个路径。mv ~/.local/share/jupyter/kernels/pythonX ~/.ipython/kernels/<kernel_name></li><li>现在，打开Jupyter Notebook，选择Kernel -&gt; Change kernel，你将看到一个新的kernel。但是，新的kernel与你之前的kernel拥有相同点名字，运行下边的命令，给你的新kernel起一个不同的名字。cd ~/.ipython/kernels/tfkernel/。接着，运行vim kernel.json来编辑kernel.json文件，将”display_name”中的默认值Python 3替换为你的新名字，然后保存，并退出。</li></ol><p>来自 <a href="http://blog.csdn.net/xue_wenyuan/article/details/51545845">http://blog.csdn.net/xue_wenyuan/article/details/51545845</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;打开终端&lt;/li&gt;
&lt;li&gt;运行下面的命令来启用TensorFlow source activate tensorflow&lt;/li&gt;
&lt;li&gt;现在我们已经进入了TensorFlow的环境，我们要在这个环境中安装iPython和jupyter，运行下面的命令con</summary>
      
    
    
    
    <category term="Python" scheme="http://shijinming.github.io/categories/Python/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/categories/Python/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Python" scheme="http://shijinming.github.io/tags/Python/"/>
    
    <category term="Tensorflow" scheme="http://shijinming.github.io/tags/Tensorflow/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>远程连接Jupyter Notebook配置</title>
    <link href="http://shijinming.github.io/2018/06/17/yuan-cheng-lian-jie-jupyter-notebook-pei-zhi/"/>
    <id>http://shijinming.github.io/2018/06/17/yuan-cheng-lian-jie-jupyter-notebook-pei-zhi/</id>
    <published>2018-06-17T15:08:23.000Z</published>
    <updated>2020-12-10T18:35:11.987Z</updated>
    
    <content type="html"><![CDATA[<p>Step-1: 在远程服务器上，启动jupyter notebooks服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook --no-browser --port<span class="token operator">=</span><span class="token number">8889</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Step-2: 在本地机器的Terminal中启动SSH：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -N -f -L localhost:8888:localhost:8889 remote_user@remote_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中： -N 告诉SSH没有命令要被远程执行； -f 告诉SSH在后台执行； -L 是指定port forwarding的配置，远端端口是8889，本地的端口号的8888。remote_user@remote_host 用实际的远程帐户和远程地址替换</p><p>Step-3: 打开浏览器，输入地址：<a href="http://localhost:8888/">http://localhost:8888/</a></p><p>来自 <a href="http://blog.csdn.net/patrick75/article/details/51473884">http://blog.csdn.net/patrick75/article/details/51473884</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Step-1: 在远程服务器上，启动jupyter notebooks服务：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;jupyt</summary>
      
    
    
    
    <category term="Python" scheme="http://shijinming.github.io/categories/Python/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/categories/Python/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Python" scheme="http://shijinming.github.io/tags/Python/"/>
    
    <category term="环境配置" scheme="http://shijinming.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>PYTHON对文件及文件夹的一些操作</title>
    <link href="http://shijinming.github.io/2018/06/17/python-dui-wen-jian-ji-wen-jian-jia-de-yi-xie-cao-zuo/"/>
    <id>http://shijinming.github.io/2018/06/17/python-dui-wen-jian-ji-wen-jian-jia-de-yi-xie-cao-zuo/</id>
    <published>2018-06-17T14:54:48.000Z</published>
    <updated>2020-12-10T18:35:11.911Z</updated>
    
    <content type="html"><![CDATA[<p>python中对文件、文件夹的操作需要涉及到os模块和shutil模块。</p><p>创建文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>mknod<span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span>  <span class="token comment"># 创建空文件</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span>          <span class="token comment"># 直接打开一个文件，如果文件不存在则创建文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建目录：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>                  <span class="token comment"># 创建目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span><span class="token string">"oldfile"</span><span class="token punctuation">,</span><span class="token string">"newfile"</span><span class="token punctuation">)</span>      <span class="token comment"># oldfile和newfile都只能是文件</span>shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">"oldfile"</span><span class="token punctuation">,</span><span class="token string">"newfile"</span><span class="token punctuation">)</span>          <span class="token comment">#  oldfile只能是文件夹，newfile可以是文件，也可以是目标目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制文件夹：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">"olddir"</span><span class="token punctuation">,</span><span class="token string">"newdir"</span><span class="token punctuation">)</span>      <span class="token comment"># olddir和newdir都只能是目录，且newdir必须不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重命名文件（目录）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"oldname"</span><span class="token punctuation">,</span><span class="token string">"newname"</span><span class="token punctuation">)</span>       <span class="token comment"># 文件或目录都是使用这条命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动文件（目录）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">"oldpos"</span><span class="token punctuation">,</span><span class="token string">"newpos"</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除目录</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span>  <span class="token comment"># 只能删除空目录</span>shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span>   <span class="token comment"># 空目录、有内容的目录都可以删 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转换目录</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>   <span class="token comment"># 换路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断目标</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"goal"</span><span class="token punctuation">)</span>    <span class="token comment"># 判断目标是否存在</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">"goal"</span><span class="token punctuation">)</span>    <span class="token comment"># 判断目标是否目录</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"goal"</span><span class="token punctuation">)</span>    <span class="token comment"># 判断目标是否文件   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来自 <a href="http://www.cnblogs.com/phoebus0501/archive/2011/01/19/1939646.html">http://www.cnblogs.com/phoebus0501/archive/2011/01/19/1939646.html</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;python中对文件、文件夹的操作需要涉及到os模块和shutil模块。&lt;/p&gt;
&lt;p&gt;创建文件：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;langu</summary>
      
    
    
    
    <category term="Python" scheme="http://shijinming.github.io/categories/Python/"/>
    
    <category term="文件操作" scheme="http://shijinming.github.io/categories/Python/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="Python" scheme="http://shijinming.github.io/tags/Python/"/>
    
    <category term="文件操作" scheme="http://shijinming.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
</feed>
